< 오늘의 오류 해결 ! >
1. package.json 파일을 server로 넣어주기
2. if문 뒤에 콤마 지우기
3. proxy 코드 업데이트 된 걸로 해주기
4. concurrently 경로 설정해주기 ../client


#15 리액트란?
- 페이스북에서 만든 라이브러리임
- 컴포넌츠로 이루어짐(재사용성 뛰어남, 모듈화)
- Virtual DOM

[ Real DOM vs Virtual DOM ]
만약 10개의 리스트가 있을 때, 한가지 리스트가 update 되면
Real DOM : 전체 리스트를 reload
Virtual DOM : 바뀐 리스트만 DOM에서 바꿔줌 -> 스냅샷을 찍어놓고, update된 부분만 바꿔줌


#16 리액트 설치하기, 기본 설정
- 설치할 위치로 이동
- cd client -> create-react-app . (점 주의)
- 바벨(추가된 자바스크립트 메소드들이 구형 브라우저에서 돌 수 있도록 변환시켜주는 것), 웹팩(연결되어 있는 여러 파일들을 번들시켜줌)


#17 npm vs npx
< npm >
- registry, 저장소 역할
- 빌드할 때 사용함
- package.json 에 나와있음
- npm install : local, node_modules에 저장됨, 디스크 공간을 낭비하지 않음, 최신 버전으로 이용 가능
- npm install -g : 글로벌로, 컴퓨터 빈 안에 저장됨

< npx >
- npm registry에서 create-react-app을 찾아서 다운로드 없이 실행시켜 준다.


#18 리액트 구조 설명
- npm run start 하면 리액트 켜짐
- index.js, index.html
- src 안의 부분만 웹팩이 관리함 -> 이미지 파일 등은 src에 넣기


#19 CRA to our boiler-plate
< _actions, _reducers >
- Redux를 위한 폴더들

< components/views >
- page들 넣는 곳

< components/views/sections >
- css 파일이나 컴포넌트

< App.js >
- routing 관련 일 처리

< config.js >
- 환경 변수 정하는 곳

< HOC >
- higher order component
- 특정 컴포넌트를 포함하고 있음
- 예를 들어, 인증 과정이 HOC이고, 안에 관리자 페이지를 만들어 인증이 된 사람만 들어올 수 있게 함

< utils >
- 여러 페이지에서 사용하는 기능을 넣어서 어디서든 쓸 수 있도록 함


#20 React Router DOM
- 라우터 : 페이지 간 연결?
- npm install react-router-dom --save
- https://reacttraining.com/react-router/web/example/basic
- 라우터 설정 
<Router>
    <div>
    {/*
        A <Switch> looks through all its children <Route>
        elements and renders the first one whose path
        matches the current URL. Use a <Switch> any time
        you have multiple routes, but you want only one
        of them to render at a time
    */}
    <Switch>
        <Route exact path="/" component={LandingPage} />

        <Route exact path="/login" component={LoginPage} />

        <Route exact path="/register" component={RegisterPage} />
    </Switch>
    </div>
</Router>


#21 데이터 flow & axios
- npm install axios --save
- axios : HTTP 클라이언트 라이브러리로써, 비동기 방식으로 HTTP 데이터 요청을 실행
- axios를 사용하여 client에서 server로 요청보내기


#22 CORS 이슈, Proxy 설정
- 서버와 클라이언트의 포트가 다른데 임의로 맞추면 CORS 정책에 위반됨(보안상의 이유)
- CORS : cross origin resource sharing
- Proxy로 해결하기로 함
- client : npm install http-proxy-middleware --save;
- client 쪽 src에 setusProxy.js를 만들고 아래 사이트 내용 복사하여 설정
- https://create-react-app.dev/docs/proxying-api-requests-in-development/



#23 Proxy server
[ 유저 - proxy server - 인터넷 ]
- 아이피를 임의로 바꿀 수 있음 -> 접근하는 사람의 IP를 알 수 없게 함
- 보내는 데이터도 임의로 바꿀 수 있음
- 방화벽 기능
- 웹 필터 기능
- 캐쉬 데이터, 공유 데이터 제공 기능 -> 더 빠른 인터넷 이용 가능
- 특정 사이트 못 들어가게 할 수 있음


#24 Concurrently
- 프론트와 백의 서버를 동시에 킬 수 있게 해줌
- npm install concurrently --save
- "dev": "concurrently \"npm run backend\" \"npm run start --prefix ../client\""
